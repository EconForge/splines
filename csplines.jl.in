include("zero_based_indexing.jl")

A44d = [
   [-1.0/6.0  3.0/6.0 -3.0/6.0 1.0/6.0],
   [ 3.0/6.0 -6.0/6.0  0.0/6.0 4.0/6.0],
   [-3.0/6.0  3.0/6.0  3.0/6.0 1.0/6.0],
   [ 1.0/6.0  0.0/6.0  0.0/6.0 0.0/6.0]
]

dA44d = [
   [ 0.0 -0.5  1.0 -0.5],
   [ 0.0  1.5 -2.0  0.0],
   [ 0.0 -1.5  1.0  0.5],
   [ 0.0  0.5  0.0  0.0]
]

d2A44d = [
   [ 0.0 0.0 -1.0  1.0],
   [ 0.0 0.0  3.0 -2.0],
   [ 0.0 0.0 -3.0  1.0],
   [ 0.0 0.0  1.0  0.0]
]

function eval_UC_spline(smin, smax, orders, C, S)

    d = size(S,2)
    N = size(S,1)

    vals = zeros(N)

    if d == 1
        eval_UC_spline_1d(smin, smax, orders, C, S, vals, A44d, dA44d)
    elseif d == 2
        eval_UC_spline_2d(smin, smax, orders, C, S, vals, A44d, dA44d)
    elseif d == 3
        eval_UC_spline_3d(smin, smax, orders, C, S, vals, A44d, dA44d)
    elseif d == 4
        eval_UC_spline_4d(smin, smax, orders, C, S, vals, A44d, dA44d)
    end

    return vals

end

function eval_UC_spline_G(smin, smax, orders, C, S)

    d = size(S,2)
    N = size(S,1)

    vals = zeros(N)
    grad = zeros(N,d)

    if d == 1
        eval_UC_spline_1d(smin, smax, orders, C, S, vals, grad, A44d, dA44d)
    elseif d == 2
        eval_UC_spline_2d(smin, smax, orders, C, S, vals, grad, A44d, dA44d)
    elseif d == 3
        eval_UC_spline_3d(smin, smax, orders, C, S, vals, grad, A44d, dA44d)
    elseif d == 4
        eval_UC_spline_4d(smin, smax, orders, C, S, vals, grad, A44d, dA44d)
    end

    return [vals, grad]

end



@zero_index begin

{{for d in range(1,max_order+1)}}


function eval_UC_spline_{{d}}d( smin, smax, orders, C, S, V, Ad, dAd)
        
        
    {{for i in range(d)}}
    M{{i}} = orders[{{i}}]
    start{{i}} = smin[{{i}}]
    dinv{{i}} = (orders[{{i}}]-1.0)/(smax[{{i}}]-smin[{{i}}])
    {{endfor}}
                    
       
    N = size(S,1)

    for n=0:N-1

            {{for i in range(d)}}
            x{{i}} = S[n,{{i}}]
            {{endfor}}

            {{for i in range(d)}}
            u{{i}} = (x{{i}} - start{{i}})*dinv{{i}}
            i{{i}} = int(floor( u{{i}} ))
            i{{i}} = max( min(i{{i}},M{{i}}-2), 0 )
            t{{i}} = u{{i}}-i{{i}}
            {{endfor}}


            {{for i in range(d)}}
            tp{{i}}_0 = t{{i}}*t{{i}}*t{{i}};  tp{{i}}_1 = t{{i}}*t{{i}};  tp{{i}}_2 = t{{i}};  tp{{i}}_3 = 1.0;
            {{endfor}}


            {{for i in range(d)}}

            if t{{i}} < 0
                Phi{{i}}_0 = dAd[0,3]*t{{i}} + Ad[0,3]
                Phi{{i}}_1 = dAd[1,3]*t{{i}} + Ad[1,3]
                Phi{{i}}_2 = dAd[2,3]*t{{i}} + Ad[2,3]
                Phi{{i}}_3 = dAd[3,3]*t{{i}} + Ad[3,3]
            elseif t{{i}} > 1
                Phi{{i}}_0 = (3*Ad[0,0] + 2*Ad[0,1] + Ad[0,2])*(t{{i}}-1) + (Ad[0,0]+Ad[0,1]+Ad[0,2]+Ad[0,3])
                Phi{{i}}_1 = (3*Ad[1,0] + 2*Ad[1,1] + Ad[1,2])*(t{{i}}-1) + (Ad[1,0]+Ad[1,1]+Ad[1,2]+Ad[1,3])
                Phi{{i}}_2 = (3*Ad[2,0] + 2*Ad[2,1] + Ad[2,2])*(t{{i}}-1) + (Ad[2,0]+Ad[2,1]+Ad[2,2]+Ad[2,3])
                Phi{{i}}_3 = (3*Ad[3,0] + 2*Ad[3,1] + Ad[3,2])*(t{{i}}-1) + (Ad[3,0]+Ad[3,1]+Ad[3,2]+Ad[3,3])
            else
                Phi{{i}}_0 = (Ad[0,0]*tp{{i}}_0 + Ad[0,1]*tp{{i}}_1 + Ad[0,2]*tp{{i}}_2 + Ad[0,3]*tp{{i}}_3)
                Phi{{i}}_1 = (Ad[1,0]*tp{{i}}_0 + Ad[1,1]*tp{{i}}_1 + Ad[1,2]*tp{{i}}_2 + Ad[1,3]*tp{{i}}_3)
                Phi{{i}}_2 = (Ad[2,0]*tp{{i}}_0 + Ad[2,1]*tp{{i}}_1 + Ad[2,2]*tp{{i}}_2 + Ad[2,3]*tp{{i}}_3)
                Phi{{i}}_3 = (Ad[3,0]*tp{{i}}_0 + Ad[3,1]*tp{{i}}_1 + Ad[3,2]*tp{{i}}_2 + Ad[3,3]*tp{{i}}_3)
            end

            {{endfor}}

            V[n] = {{values[d]}}

    end

end

{{endfor}}

end



@zero_index begin

{{for d in range(1,max_order+1)}}


function eval_UC_spline_{{d}}d( smin, smax, orders, C, S, V, dV, Ad, dAd)
        

    {{for i in range(d)}}
    M{{i}} = orders[{{i}}]
    start{{i}} = smin[{{i}}]
    dinv{{i}} = (orders[{{i}}]-1.0)/(smax[{{i}}]-smin[{{i}}])
    {{endfor}}
                    
       
    N = size(S,1)

    for n=0:N-1

            {{for i in range(d)}}
            x{{i}} = S[n,{{i}}]
            {{endfor}}

            {{for i in range(d)}}
            u{{i}} = (x{{i}} - start{{i}})*dinv{{i}}
            i{{i}} = int(floor( u{{i}} ))
            i{{i}} = max( min(i{{i}},M{{i}}-2), 0 )
            t{{i}} = u{{i}}-i{{i}}
            {{endfor}}


            {{for i in range(d)}}
            tp{{i}}_0 = t{{i}}*t{{i}}*t{{i}};  tp{{i}}_1 = t{{i}}*t{{i}};  tp{{i}}_2 = t{{i}};  tp{{i}}_3 = 1.0;
            {{endfor}}


            {{for i in range(d)}}

            if t{{i}} < 0
                Phi{{i}}_0 = dAd[0,3]*t{{i}} + Ad[0,3]
                Phi{{i}}_1 = dAd[1,3]*t{{i}} + Ad[1,3]
                Phi{{i}}_2 = dAd[2,3]*t{{i}} + Ad[2,3]
                Phi{{i}}_3 = dAd[3,3]*t{{i}} + Ad[3,3]
            elseif t{{i}} > 1
                Phi{{i}}_0 = (3*Ad[0,0] + 2*Ad[0,1] + Ad[0,2])*(t{{i}}-1) + (Ad[0,0]+Ad[0,1]+Ad[0,2]+Ad[0,3])
                Phi{{i}}_1 = (3*Ad[1,0] + 2*Ad[1,1] + Ad[1,2])*(t{{i}}-1) + (Ad[1,0]+Ad[1,1]+Ad[1,2]+Ad[1,3])
                Phi{{i}}_2 = (3*Ad[2,0] + 2*Ad[2,1] + Ad[2,2])*(t{{i}}-1) + (Ad[2,0]+Ad[2,1]+Ad[2,2]+Ad[2,3])
                Phi{{i}}_3 = (3*Ad[3,0] + 2*Ad[3,1] + Ad[3,2])*(t{{i}}-1) + (Ad[3,0]+Ad[3,1]+Ad[3,2]+Ad[3,3])
            else
                Phi{{i}}_0 = (Ad[0,0]*tp{{i}}_0 + Ad[0,1]*tp{{i}}_1 + Ad[0,2]*tp{{i}}_2 + Ad[0,3]*tp{{i}}_3)
                Phi{{i}}_1 = (Ad[1,0]*tp{{i}}_0 + Ad[1,1]*tp{{i}}_1 + Ad[1,2]*tp{{i}}_2 + Ad[1,3]*tp{{i}}_3)
                Phi{{i}}_2 = (Ad[2,0]*tp{{i}}_0 + Ad[2,1]*tp{{i}}_1 + Ad[2,2]*tp{{i}}_2 + Ad[2,3]*tp{{i}}_3)
                Phi{{i}}_3 = (Ad[3,0]*tp{{i}}_0 + Ad[3,1]*tp{{i}}_1 + Ad[3,2]*tp{{i}}_2 + Ad[3,3]*tp{{i}}_3)
            end

            {{endfor}}

            {{for i in range(d)}}
            dPhi{{i}}_0 = (dAd[0,0]*tp{{i}}_0 + dAd[0,1]*tp{{i}}_1 + dAd[0,2]*tp{{i}}_2 + dAd[0,3]*tp{{i}}_3)*dinv{{i}}
            dPhi{{i}}_1 = (dAd[1,0]*tp{{i}}_0 + dAd[1,1]*tp{{i}}_1 + dAd[1,2]*tp{{i}}_2 + dAd[1,3]*tp{{i}}_3)*dinv{{i}}
            dPhi{{i}}_2 = (dAd[2,0]*tp{{i}}_0 + dAd[2,1]*tp{{i}}_1 + dAd[2,2]*tp{{i}}_2 + dAd[2,3]*tp{{i}}_3)*dinv{{i}}
            dPhi{{i}}_3 = (dAd[3,0]*tp{{i}}_0 + dAd[3,1]*tp{{i}}_1 + dAd[3,2]*tp{{i}}_2 + dAd[3,3]*tp{{i}}_3)*dinv{{i}}
            {{endfor}}



            V[n] = {{values[d]}}

            {{for i in range(d)}}
            dV[n,{{i}}] = {{dvalues[d][i]}} 
            {{endfor}}


    end

end

{{endfor}}

end
